<% if local_assigns[:position] == 'toolbar' %>
<%= stylesheet_link_tag 'improved_description', plugin: :description_ai %>
<script>
  document.addEventListener("DOMContentLoaded", function () {
    const toolbar = document.querySelector(".jstElements");
    if (toolbar) {
      // Butonları oluştur
      const sendButton = document.createElement("button");
      sendButton.id = "send-description-btn";
      sendButton.classList.add("custom-icon-button");

      const nextButton = document.createElement("button");
      nextButton.id = "next-description-btn";
      nextButton.innerText = ">";
      nextButton.classList.add("next-button");
      nextButton.disabled = false;

      // Butonları toolbara ekle
      toolbar.appendChild(sendButton);
      toolbar.appendChild(nextButton);

      // JavaScript işlemleri
      let currentIndex = 0;

      // Send butonuna tıklama işlemi
      sendButton.addEventListener("click", function () {
        const descriptionField = document.querySelector('#issue_description');
        const subjectField = document.querySelector('#issue_subject');

        if (!descriptionField || descriptionField.value.trim() === "") {
          alert("Description field cannot be empty.");
          return;
        }

        if (!subjectField || subjectField.value.trim() === "") {
          alert("Subject field cannot be empty.");
          return;
        }

        // İstek gönderilirken durumu yansıt
        const originalClass = sendButton.className;
        sendButton.disabled = true;
        // Yükleme simgesini gösteren sınıfı ekle
        sendButton.classList.remove("custom-icon-button");
        sendButton.classList.add("loading-icon-button");
        

        fetch('/improved_description/improve_description', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRF-Token': '<%= form_authenticity_token %>'
          },
          body: JSON.stringify({
            subject: subjectField.value,
            description: descriptionField.value
          })
        })
          .then(response =>  response.json())
          .then(data => {
            sendButton.disabled = false;
            sendButton.className = originalClass;
            if (data.success) {
              let issues = [data.original, ...data.alternatives]
              // Sağ ok butonu
              nextButton.addEventListener("click", function (event) {
                event.preventDefault();
                currentIndex = updateNextIssue(currentIndex, issues);
              });

              // Gelen önerilerin ilkini görüntülüyoruz
              // subject, description ve tags güncellenecek
              // orjinal + alternatif issue önerileri
              currentIndex = updateNextIssue(0, issues)
              alert("Tags updated successfully! Use the arrows to navigate.");
            } else {
              alert('Failed to improve description: ' + data.message);
            }
          })
          .catch(error => {
            sendButton.disabled = false;
            sendButton.className = originalClass;
            console.error('Fetch Error:', error);
            alert("An error occurred while improving the description.");
          });
      });

      function updateNextIssue(_currentIndex, _issues){
        nextIndex = _currentIndex + 1
        issue = _issues[_currentIndex % _issues.length] 
        updateDesc(issue.description)
        updateTags(issue.tags)
        nextButton.innerText = `${(_currentIndex % _issues.length)+1}/${_issues.length} >`
        return nextIndex 
      }

      function updateDesc(newText){
        const descriptionField = document.querySelector('#issue_description');
        if (!descriptionField) {
          console.warn("'issue_description' ID'li html elemanı bulunamadı!")
          return
        }
        
        descriptionField.value = newText || "";
      }

      function updateTags(newTags){
        const tagField = $('#issue_tag_list'); // Select2 alanı
        
        if (!tagField) {
          console.warn("'issue_tag_list' ID'li html elemanı bulunamadı!")
          return 
        }
        
        // Mevcut seçimleri temizle
        tagField.empty(); 
        newTags.forEach(tag => {
          const newOption = new Option(tag, tag, true, true);
          tagField.append(newOption);
        });
        tagField.trigger("change");

        if (!tagField.hasClass("select2-hidden-accessible")) {
          // Select2 özelliklerini uygula
          tagField.select2(); 
        }
      }
    }
  });
</script>
<% end %>
